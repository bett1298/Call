<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>DateLink â€” Video Call Room</title>
  <style>
    body {
      font-family: 'Poppins', sans-serif;
      background: #fdf2f8;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }
    .container {
      background: #fff;
      border-radius: 20px;
      padding: 30px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      width: 90%;
      max-width: 500px;
      text-align: center;
    }
    input {
      padding: 10px;
      width: 60%;
      border: 1px solid #ccc;
      border-radius: 10px;
      margin-bottom: 10px;
      font-size: 16px;
    }
    button {
      padding: 10px 15px;
      border: none;
      background: #ff4f87;
      color: white;
      font-weight: bold;
      border-radius: 10px;
      cursor: pointer;
    }
    button:hover { background: #ff2c6c; }
    .hidden { display: none; }
    video {
      width: 100%;
      border-radius: 10px;
      margin-top: 10px;
      background: #000;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>ðŸ“ž DateLink Video Call</h1>

    <div id="registerSection">
      <input type="text" id="userId" placeholder="Enter your name" />
      <button id="registerBtn">Join</button>
    </div>

    <div id="callSection" class="hidden">
      <p>Welcome, <b id="currentUser"></b></p>
      <input type="text" id="targetUser" placeholder="Enter user to call" />
      <button id="callBtn">ðŸ“ž Call</button>
    </div>

    <div id="incomingCall" class="hidden">
      <p id="callerName"></p>
      <button id="acceptBtn">Accept</button>
      <button id="rejectBtn">Reject</button>
    </div>

    <video id="localVideo" autoplay playsinline muted></video>
    <video id="remoteVideo" autoplay playsinline></video>
  </div>

  <!-- âœ… Load Socket.IO Client Library FIRST -->
  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>

  <script>
    const socket = io("https://YOUR-REPLIT-URL.repl.co"); // ðŸ”¹ Replace with your actual Replit server URL

    let localStream, remoteStream, peerConnection;
    const servers = { iceServers: [{ urls: "stun:stun1.l.google.com:19302" }] };

    const registerSection = document.getElementById("registerSection");
    const callSection = document.getElementById("callSection");
    const incomingCall = document.getElementById("incomingCall");
    const userInput = document.getElementById("userId");
    const currentUser = document.getElementById("currentUser");
    const targetInput = document.getElementById("targetUser");
    const callerName = document.getElementById("callerName");

    document.getElementById("registerBtn").onclick = () => {
      const userId = userInput.value.trim();
      if (!userId) return alert("Enter a name first!");
      socket.emit("join-room", userId);
      currentUser.textContent = userId;
      registerSection.classList.add("hidden");
      callSection.classList.remove("hidden");
    };

    document.getElementById("callBtn").onclick = async () => {
      const targetUser = targetInput.value.trim();
      if (!targetUser) return alert("Enter user to call");

      localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      document.getElementById("localVideo").srcObject = localStream;

      peerConnection = new RTCPeerConnection(servers);
      remoteStream = new MediaStream();
      document.getElementById("remoteVideo").srcObject = remoteStream;

      localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));
      peerConnection.ontrack = e => e.streams[0].getTracks().forEach(track => remoteStream.addTrack(track));

      peerConnection.onicecandidate = e => {
        if (e.candidate) socket.emit("ice-candidate", { target: targetUser, candidate: e.candidate });
      };

      const offer = await peerConnection.createOffer();
      await peerConnection.setLocalDescription(offer);
      socket.emit("call-user", { target: targetUser, offer });
    };

    socket.on("call-made", async ({ offer, from }) => {
      callerName.textContent = `${from} is calling...`;
      incomingCall.classList.remove("hidden");

      document.getElementById("acceptBtn").onclick = async () => {
        incomingCall.classList.add("hidden");
        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        document.getElementById("localVideo").srcObject = localStream;

        peerConnection = new RTCPeerConnection(servers);
        remoteStream = new MediaStream();
        document.getElementById("remoteVideo").srcObject = remoteStream;

        localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));
        peerConnection.ontrack = e => e.streams[0].getTracks().forEach(track => remoteStream.addTrack(track));

        peerConnection.onicecandidate = e => {
          if (e.candidate) socket.emit("ice-candidate", { target: from, candidate: e.candidate });
        };

        await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        socket.emit("make-answer", { target: from, answer });
      };

      document.getElementById("rejectBtn").onclick = () => {
        incomingCall.classList.add("hidden");
      };
    });

    socket.on("answer-made", async ({ answer }) => {
      await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    });

    socket.on("ice-candidate", async ({ candidate }) => {
      if (candidate) await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    });
  </script>
</body>
</html>
